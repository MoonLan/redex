#line 2 "generated_files/tokenizer.cc"

#line 4 "generated_files/tokenizer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 79
#define YY_END_OF_BUFFER 80
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[743] =
    {   0,
        0,    0,   80,   78,    1,    2,    6,    9,   77,    7,
       31,   32,   77,    4,   78,    5,   78,    3,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   29,   30,    1,
        9,   77,   77,    8,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   77,
       77,   24,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   18,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   77,
       23,   77,   20,   77,   77,   77,   77,   77,   77,   77,
       77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   35,    0,    0,   77,   77,   77,   77,
       77,   22,   77,   77,   36,   19,   77,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   40,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   77,   77,   77,
       27,   77,   77,   37,   77,   77,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   58,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   75,    0,   33,    0,    0,   77,   77,   77,   77,
       77,   77,   77,    0,    0,    0,    0,    0,    0,   49,
        0,    0,    0,    0,    0,    0,   54,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   34,    0,   77,
       77,   77,   77,   25,   38,   21,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   26,   77,

       77,   77,   28,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   53,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   70,
       71,    0,    0,    0,    0,   77,   77,   77,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   39,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   77,   77,   77,
        0,    0,    0,   46,    0,    0,    0,   51,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   69,    0,    0,    0,    0,   77,   77,

       77,    0,    0,    0,    0,    0,   50,   52,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   65,
        0,    0,    0,    0,    0,    0,    0,   77,   77,   12,
        0,    0,    0,    0,    0,    0,    0,    0,   59,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   77,   77,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   10,   77,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   16,
       60,    0,    0,    0,    0,    0,    0,    0,    0,   73,

        0,   76,   11,   42,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   61,    0,    0,   64,    0,    0,   68,    0,
        0,    0,    0,    0,   47,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   15,    0,    0,   66,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   63,    0,    0,    0,    0,   44,    0,    0,    0,
        0,    0,    0,   13,    0,    0,    0,    0,    0,   45,

        0,    0,    0,   57,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
        0,    0,    0,    0,    0,   72,   74,   48,    0,   55,
       14,    0,    0,    0,   62,    0,    0,   67,    0,    0,
       56,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    5,    6,    1,    1,    7,    8,
        9,   10,    1,   11,   12,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,   13,   14,
        1,   15,    1,   16,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,   17,    1,    6,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,    1,   45,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    1,    2,    1,    3,    3,    1,    1,    1,    3,
        1,    3,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1
    } ;

static yyconst flex_int16_t yy_base[746] =
    {   0,
        0,    0, 1111, 1112, 1108, 1112, 1112,    0,   41, 1112,
     1112, 1112,   42, 1112,   42, 1112,   26, 1083,   61,   71,
       74,   80,   82,   84,   99,  102,  105, 1112, 1112, 1106,
        0,    0,   52, 1112,   97, 1078, 1074, 1076, 1073, 1081,
     1076, 1079,   90,   32, 1078, 1063, 1076, 1072, 1070, 1064,
     1072, 1062,  115,  130,  119,  133,  141,  144,  147,  150,
      163,  164,  161,  180, 1074, 1062, 1057, 1053, 1070, 1056,
     1068,  166, 1063, 1065, 1048, 1059, 1044, 1043, 1057, 1058,
     1051,   62, 1054, 1040, 1032, 1051, 1046, 1034, 1033,  189,
      191,  195,  197,  199,  217,  218,  219,  221,  227,  236,

      237,  238, 1036, 1036, 1038, 1028, 1029, 1027, 1026, 1033,
     1043, 1027, 1024, 1034, 1019, 1030, 1028, 1019, 1025, 1021,
     1033, 1032, 1011, 1029, 1029, 1017, 1008, 1019, 1021,  246,
      254,  256,  265,  271,  267,  275,  286,  289,  292,  300,
      303,  306, 1005, 1001,  998, 1009, 1002,  299, 1000,  998,
     1000,  316, 1016, 1011,  996, 1001, 1012, 1000, 1010,  990,
      996, 1005,  993,  991,  987, 1000, 1005,  987,  983,  316,
      333,  339,  341,  349,  350,  352,  358,  360,  366,  376,
      377,  170,  999,  986,  993,  982,  981,   65,  977,   23,
      975,  992,  987,  987,  971,  969,  976,  986,  985,  967,

      975,  980,  973,  963,  965,  972,  370,  973,  966,  967,
      956,  969,  954, 1112,  968,  965,  380,  393,  397,  399,
      407,  410,  418,  424,  426,  427,  437,  958,  964,  965,
      966,  952,  963,  944,  957,  942,  956,  942,  950,  953,
      939,  942,  950, 1112,  934,  952,  939,  193,  926,  936,
      948,  922,  928,  945,  940,  929,  942,  937,  922,  921,
      938,  921,  932,  911,  937,  915,  932,  440,  441,  450,
      459,  460,  463,  469,  477,  483,  931,  912,  927,  913,
      913,  921,  921,  904,  915,  901,  913,  905,  907,  905,
      902, 1112,  899,  897,  910,  903,  912,  902,  891,  890,

      908, 1112,  904,  892,  892,  889,  899,  902,  887,  894,
      879, 1112,  884, 1112,  900,  894,  485,  491,  493,  499,
      508,  510,  516,  877,  880,  889,  877,  873,  870, 1112,
      871,  876,  883,  873,  872,  876, 1112,  883,  874,  863,
      862,  879,  866,  877,  872,  867,  855,  873,  871,  866,
      855,  866,  862,  847,  862,  861,  844, 1112,  859,  527,
      529,  530,  533,  543,  553,  559,  844,  841,  842,  851,
      850,  839,  854,  847,  837,  843,  838,  828,  848,  848,
      121, 1112,  842,  843,  829,  828,  830,  835,  836,  836,
      832,  831,  820,  833,  819,  833,  832,  823, 1112,  561,

      562,  563,  572,  814,  814,  812,  816,  825,  825,  826,
      800,  816, 1112,  810,  818,  811,  800,  801,  814,  813,
      797,  797,  809,  800,  798,  805,  790,  803,  795, 1112,
     1112,  805,  795,  794,  800,  578,  580,  581,  784,  800,
      789,  794,  795,  798,  778,  792,  790,  779,  790,  792,
      772,  768,  777,  775,  783, 1112,  786,  782,  771,  766,
      764,  761,  774,  775,  778,  777,  772,  582,  596,  598,
      758,  770,  759, 1112,  768,  752,  766, 1112,  745,  748,
      765,  760,  761,  756,  762,  762,  744,  758,  751,  127,
      754,  755,  739, 1112,  750,  736,  735,  737,  599,  600,

      615,  743,  745,  746,  743,  739, 1112, 1112,  745,  745,
      740,  725,  723,  737,  728,  726,  734,  735,  736, 1112,
      717,  734,  733,  724,  713,  712,  721,  616,  619,  629,
      715,  719,  718,  720,  710,  712,  704,  714, 1112,  713,
      702,  714,  717,  698,  696,  696,  695,  693,  692,  699,
      705,  696,  694,  630,  638,  700,  694,  699,  699,  689,
      693,  696,  691,  686,   72,  679,  684,  695,  686,  675,
      684,  683,  682,  685,  670,  683,  680,  639,  647,  667,
      680,  675,  680,  678,  678,  677,  674,  673,  676, 1112,
     1112,  671,  668,  659,  668,  650,  656,  655,  668, 1112,

      655, 1112,  648, 1112,  134,  664,  646,  656,  651,  648,
      641,  645,  644,  637,  648,  640,  633,  646,  636,  635,
      626,  643,  626,  639,  636,  613,  620,  612,  612,  608,
      603,  596, 1112,  574,  588, 1112,  573,  579, 1112,  545,
      550,  531,  527,  519, 1112,  517,  533,  515,  514,  521,
      504,  515,  494,  484,  498,  483,  477,  472,  485,  480,
      475,  458,  456,  467,  449, 1112,  443,  431, 1112,  450,
      443,  435,  438,  420,  419,  418,  430,  416,  412,  179,
      398, 1112,  391,  407,  402,   30, 1112,   90,   94,  106,
      153,  132,  164, 1112,  162,  165,  161,  188,  183, 1112,

      219,  205,  222, 1112,  226,  218,  230,  230,  253,  242,
      246,  265,  271,  273,  277,  271,  291,  280, 1112,  277,
      293,  288,  291,  311,  323, 1112, 1112, 1112,  325, 1112,
     1112,  317,  333,  340, 1112,  342,  351, 1112,  369,  365,
     1112, 1112,  678,  404,  414
    } ;

static yyconst flex_int16_t yy_def[746] =
    {   0,
      742,    1,  742,  742,  742,  742,  742,  743,  744,  742,
      742,  742,  744,  742,  742,  742,  742,  742,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  742,  742,  742,
      743,  745,  744,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,

      744,  744,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  744,  744,  744,  744,
      744,  744,  744,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  744,
      744,  744,  744,  744,  744,  744,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  744,

      744,  744,  744,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  744,  744,  744,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  744,  744,  744,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  744,  744,

      744,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  744,  744,  744,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  744,  744,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  744,  744,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  744,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,    0,  742,  742,  742
    } ;

static yyconst flex_int16_t yy_nxt[1158] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,    4,   18,    4,   19,    9,   20,
        9,   21,   22,    9,    9,   23,    9,    9,    9,    9,
       24,    9,   25,    9,    9,   26,   27,    9,    9,    9,
        9,    9,    9,   28,   29,   32,   32,  238,   49,   80,
      239,   50,   32,   32,   34,   51,   32,   32,   32,   35,
      699,   36,   37,   32,   38,   32,   81,   39,   32,   40,
       41,   42,   32,   43,   44,   32,   45,   32,   32,   46,
       47,   48,   32,  235,   32,   32,   32,   32,   32,   53,
       32,   32,  121,   32,  122,   32,   32,  236,   32,   54,

       32,   60,  589,   32,   55,   57,   32,  590,   76,   32,
       32,   58,   59,   32,   56,   32,   32,   65,   32,   32,
      700,   32,   77,   32,  701,   66,   32,   78,   79,   67,
       32,   32,   68,   61,   32,   32,   62,   32,   63,   64,
      702,   32,  418,   90,   32,   32,   32,   91,   32,   32,
      419,   32,   32,  623,   32,   32,   92,   32,   32,  519,
       32,   32,  520,   32,  624,   32,   32,   32,   32,   93,
      703,   94,   32,  704,   32,   32,   95,   32,  101,   32,
       32,  705,  100,   96,   32,  110,   97,  706,   98,  228,
      707,   32,  111,   32,   99,   32,   32,  102,  708,   32,

       32,   32,   32,   32,  229,   32,   32,   32,   32,  693,
       32,   32,  296,   32,  694,   32,  134,  709,  133,  710,
      130,   32,   32,   32,  132,   32,  131,  297,   32,   32,
       32,   32,   32,   32,   32,   32,  711,   32,   32,  136,
       32,   32,   32,   32,  137,  135,  712,   32,   32,   32,
       32,  713,   32,   32,   32,  714,  715,   32,   32,  138,
       32,  716,   32,  139,  140,   32,  717,   32,  142,   32,
       32,   32,   32,  141,  718,   32,   32,  719,   32,   32,
      720,   32,   32,   32,  721,  170,   32,   32,  174,  171,
       32,   32,  722,   32,  723,  172,   32,   32,  724,  173,

       32,  725,   32,   32,   32,   32,  177,   32,   32,  175,
       32,   32,  726,  178,   32,  727,   32,   32,  728,   32,
       32,  729,   32,  730,  176,  179,  731,   32,  180,  187,
      188,  189,   32,  196,  190,  197,  191,   32,  192,  732,
      733,  181,  734,   32,   32,   32,  198,  217,  199,   32,
       32,  218,   32,   32,   32,   32,   32,   32,  735,  219,
       32,   32,   32,   32,   32,   32,   32,  736,   32,   32,
       32,   32,  221,  222,   32,  737,   32,   32,  220,  224,
       32,   32,   32,  738,   32,  225,  739,   32,   32,  256,
      740,   32,   32,   32,  223,  226,   32,   32,  268,  257,

      741,   32,  227,   32,   32,  258,   33,  259,   32,   32,
       32,   32,  269,   32,   32,   32,   32,  270,   32,  698,
      272,   32,   32,   32,  273,  697,   32,  696,   32,   32,
       32,   32,  271,  695,   32,   32,  692,   32,   32,  274,
       32,   32,   32,   32,   32,   32,  691,  690,   32,  689,
      688,   32,   32,   32,   32,  687,   32,   32,  276,  686,
      275,   32,  317,   32,   32,  685,   32,   32,  684,  683,
       32,   32,  682,   32,   32,   32,   32,  318,  681,   32,
       32,   32,  321,  680,  319,   32,  679,   32,   32,   32,
      320,  678,  677,   32,   32,   32,   32,   32,  322,   32,

      676,   32,   32,   32,   32,  675,  674,   32,  673,   32,
       32,  672,   32,  323,   32,   32,  361,  671,  362,   32,
       32,   32,  360,  670,   32,  669,   32,   32,  668,  364,
      365,   32,   32,   32,   32,  363,  667,   32,   32,  666,
       32,   32,  665,   32,   32,   32,   32,   32,  664,   32,
      663,  662,  366,  661,   32,  660,  659,   32,  401,   32,
      402,  658,  400,   32,   32,   32,   32,   32,  403,   32,
       32,  657,   32,   32,   32,   32,   32,   32,   32,   32,
      436,  656,   32,   32,   32,   32,   32,  437,   32,   32,
      438,   32,   32,   32,   32,  468,   32,   32,   32,  655,

       32,  654,   32,   32,   32,  653,  470,   32,  652,   32,
       32,   32,   32,  500,   32,   32,   32,  651,  499,   32,
       32,  650,  469,   32,  528,  649,   32,   32,  501,  648,
       32,   32,   32,   32,   32,   32,  529,  647,  530,  646,
       32,   32,   32,   32,  555,   32,   32,  554,  645,   32,
       32,   32,   32,  644,   32,   32,  643,  642,   32,   32,
      578,  641,  640,   32,   32,  639,  638,  637,  636,  579,
      635,  634,  633,  632,  631,  630,  629,  603,   31,  628,
       31,  627,  626,  625,  622,  621,  620,  619,  618,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,

      606,  605,  604,  602,  601,  600,  599,  598,  597,  596,
      595,  594,  593,  592,  591,  588,  587,  586,  585,  584,
      583,  582,  581,  580,  577,  576,  575,  574,  573,  572,
      571,  570,  569,  568,  567,  566,  565,  564,  563,  562,
      561,  560,  559,  558,  557,  556,  553,  552,  551,  550,
      549,  548,  547,  546,  545,  544,  543,  542,  541,  540,
      539,  538,  537,  536,  535,  534,  533,  532,  531,  527,
      526,  525,  524,  523,  522,  521,  518,  517,  516,  515,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  498,  497,  496,  495,  494,  493,  492,

      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  473,  472,
      471,  467,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  453,  452,  451,  450,  449,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  417,  416,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      399,  398,  397,  396,  395,  394,  393,  392,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  380,

      379,  378,  377,  376,  375,  374,  373,  372,  371,  370,
      369,  368,  367,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  316,
      315,  314,  313,  312,  311,  310,  309,  308,  307,  306,
      305,  304,  303,  302,  301,  300,  299,  298,  295,  294,
      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  280,  279,  278,  277,  267,  266,  265,
      264,  263,  262,  261,  260,  255,  254,  253,  252,  251,

      250,  249,  248,  247,  246,  245,  244,  243,  242,  241,
      240,  237,  234,  233,  232,  231,  230,  216,  215,  214,
      213,  212,  211,  210,  209,  208,  207,  206,  205,  204,
      203,  202,  201,  200,  195,  194,  193,  186,  185,  184,
      183,  182,  169,  168,  167,  166,  165,  164,  163,  162,
      161,  160,  159,  158,  157,  156,  155,  154,  153,  152,
      151,  150,  149,  148,  147,  146,  145,  144,  143,  129,
      128,  127,  126,  125,  124,  123,  120,  119,  118,  117,
      116,  115,  114,  113,  112,  109,  108,  107,  106,  105,
      104,  103,   89,   88,   87,   86,   85,   84,   83,   82,

       75,   74,   73,   72,   71,   70,   69,   30,   52,   30,
      742,    3,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742
    } ;

static yyconst flex_int16_t yy_chk[1158] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    9,   13,  190,   17,   44,
      190,   17,    9,   13,   13,   17,   33,    9,   13,   15,
      686,   15,   15,   33,   15,   19,   44,   15,   33,   15,
       15,   15,   19,   15,   15,   20,   15,   19,   21,   15,
       15,   15,   20,  188,   22,   21,   23,   20,   24,   19,
       21,   22,   82,   23,   82,   24,   22,  188,   23,   20,

       24,   24,  565,   25,   21,   22,   26,  565,   43,   27,
       25,   23,   23,   26,   21,   25,   27,   35,   26,   53,
      688,   27,   43,   55,  689,   35,   53,   43,   43,   35,
       55,   53,   35,   25,   54,   55,   25,   56,   26,   27,
      690,   54,  381,   53,   56,   57,   54,   54,   58,   56,
      381,   59,   57,  605,   60,   58,   55,   57,   59,  490,
       58,   60,  490,   59,  605,   63,   60,   61,   62,   56,
      691,   57,   63,  692,   61,   62,   58,   63,   63,   61,
       62,  693,   62,   59,   64,   72,   60,  695,   61,  182,
      696,   64,   72,   90,   61,   91,   64,   64,  697,   92,

       90,   93,   91,   94,  182,   90,   92,   91,   93,  680,
       94,   92,  248,   93,  680,   94,   94,  698,   93,  699,
       90,   95,   96,   97,   92,   98,   91,  248,   95,   96,
       97,   99,   98,   95,   96,   97,  701,   98,   99,   96,
      100,  101,  102,   99,   97,   95,  702,  100,  101,  102,
      130,  703,  100,  101,  102,  705,  706,  130,  131,   98,
      132,  707,  130,   99,  100,  131,  708,  132,  102,  133,
      131,  135,  132,  101,  709,  134,  133,  710,  135,  136,
      711,  133,  134,  135,  712,  130,  136,  134,  135,  131,
      137,  136,  713,  138,  714,  133,  139,  137,  715,  134,

      138,  716,  137,  139,  140,  138,  138,  141,  139,  136,
      142,  140,  717,  139,  141,  718,  140,  142,  720,  141,
      170,  721,  142,  722,  137,  140,  723,  170,  141,  148,
      148,  148,  170,  152,  148,  152,  148,  171,  148,  724,
      725,  142,  729,  172,  171,  173,  152,  170,  152,  171,
      172,  170,  173,  174,  175,  172,  176,  173,  732,  172,
      174,  175,  177,  176,  178,  174,  175,  733,  176,  177,
      179,  178,  175,  176,  177,  734,  178,  179,  174,  178,
      180,  181,  179,  736,  217,  179,  737,  180,  181,  207,
      739,  217,  180,  181,  177,  180,  217,  218,  217,  207,

      740,  219,  181,  220,  218,  207,  744,  207,  219,  218,
      220,  221,  217,  219,  222,  220,  745,  218,  221,  685,
      220,  222,  223,  221,  221,  684,  222,  683,  224,  223,
      225,  226,  219,  681,  223,  224,  679,  225,  226,  223,
      224,  227,  225,  226,  268,  269,  678,  677,  227,  676,
      675,  268,  269,  227,  270,  674,  268,  269,  227,  673,
      224,  270,  268,  271,  272,  672,  270,  273,  671,  670,
      271,  272,  668,  274,  273,  271,  272,  269,  667,  273,
      274,  275,  273,  665,  270,  274,  664,  276,  275,  317,
      272,  663,  662,  275,  276,  318,  317,  319,  275,  276,

      661,  317,  318,  320,  319,  660,  659,  318,  658,  319,
      320,  657,  321,  276,  322,  320,  318,  656,  319,  321,
      323,  322,  317,  655,  321,  654,  322,  323,  653,  321,
      322,  360,  323,  361,  362,  320,  652,  363,  360,  651,
      361,  362,  650,  360,  363,  361,  362,  364,  649,  363,
      648,  647,  323,  646,  364,  644,  643,  365,  361,  364,
      362,  642,  360,  366,  365,  400,  401,  402,  363,  365,
      366,  641,  400,  401,  402,  366,  403,  400,  401,  402,
      400,  640,  436,  403,  437,  438,  468,  401,  403,  436,
      402,  437,  438,  468,  436,  436,  437,  438,  468,  638,

      469,  637,  470,  499,  500,  635,  438,  469,  634,  470,
      499,  500,  469,  469,  470,  499,  500,  632,  468,  501,
      528,  631,  437,  529,  499,  630,  501,  528,  470,  629,
      529,  501,  528,  530,  554,  529,  500,  628,  501,  627,
      530,  554,  555,  578,  529,  530,  554,  528,  626,  555,
      578,  579,  603,  625,  555,  578,  624,  623,  579,  603,
      554,  622,  621,  579,  603,  620,  619,  618,  617,  555,
      616,  615,  614,  613,  612,  611,  610,  579,  743,  609,
      743,  608,  607,  606,  601,  599,  598,  597,  596,  595,
      594,  593,  592,  589,  588,  587,  586,  585,  584,  583,

      582,  581,  580,  577,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  564,  563,  562,  561,  560,
      559,  558,  557,  556,  553,  552,  551,  550,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  538,  537,
      536,  535,  534,  533,  532,  531,  527,  526,  525,  524,
      523,  522,  521,  519,  518,  517,  516,  515,  514,  513,
      512,  511,  510,  509,  506,  505,  504,  503,  502,  498,
      497,  496,  495,  493,  492,  491,  489,  488,  487,  486,
      485,  484,  483,  482,  481,  480,  479,  477,  476,  475,
      473,  472,  471,  467,  466,  465,  464,  463,  462,  461,

      460,  459,  458,  457,  455,  454,  453,  452,  451,  450,
      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,
      439,  435,  434,  433,  432,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      398,  397,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      359,  357,  356,  355,  354,  353,  352,  351,  350,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  340,  339,

      338,  336,  335,  334,  333,  332,  331,  329,  328,  327,
      326,  325,  324,  316,  315,  313,  311,  310,  309,  308,
      307,  306,  305,  304,  303,  301,  300,  299,  298,  297,
      296,  295,  294,  293,  291,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  267,
      266,  265,  264,  263,  262,  261,  260,  259,  258,  257,
      256,  255,  254,  253,  252,  251,  250,  249,  247,  246,
      245,  243,  242,  241,  240,  239,  238,  237,  236,  235,
      234,  233,  232,  231,  230,  229,  228,  216,  215,  213,
      212,  211,  210,  209,  208,  206,  205,  204,  203,  202,

      201,  200,  199,  198,  197,  196,  195,  194,  193,  192,
      191,  189,  187,  186,  185,  184,  183,  169,  168,  167,
      166,  165,  164,  163,  162,  161,  160,  159,  158,  157,
      156,  155,  154,  153,  151,  150,  149,  147,  146,  145,
      144,  143,  129,  128,  127,  126,  125,  124,  123,  122,
      121,  120,  119,  118,  117,  116,  115,  114,  113,  112,
      111,  110,  109,  108,  107,  106,  105,  104,  103,   89,
       88,   87,   86,   85,   84,   83,   81,   80,   79,   78,
       77,   76,   75,   74,   73,   71,   70,   69,   68,   67,
       66,   65,   52,   51,   50,   49,   48,   47,   46,   45,

       42,   41,   40,   39,   38,   37,   36,   30,   18,    5,
        3,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "config.l"
#line 2 "config.l"
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

#pragma clang diagnostic ignored "-Wdeprecated-register"
#pragma clang diagnostic ignored "-Wnull-conversion"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunneeded-internal-declaration"

#define YYSTYPE char*

#include <iostream>
#include <cstdio>
#include "parser.hh"

#define RED "\033[0;31m"
#define NO_COLOR "\033[0m"
#define WHENDEBUG(x) fprintf(stderr, RED x " %d  %s" NO_COLOR "  \n", line_number, yytext)
#define DEBUG(x)
#define YY_DECL extern "C" int yylex()

int line_number = 1;

/* For the moment we conflate tokens for patterns and filenames. TODO: fix. */
#line 983 "generated_files/tokenizer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 120 "config.l"



#line 1169 "generated_files/tokenizer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 743 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1112 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 123 "config.l"
/* Ignore whitespace */;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 124 "config.l"
{line_number++;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 126 "config.l"
{DEBUG("at               ");  return T_AT;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 127 "config.l"
{DEBUG("comma            ");  return T_COMMA;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 128 "config.l"
{DEBUG("semicolon        ");  return T_SEMICOLON;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 129 "config.l"
{DEBUG("not              ");  return T_NOT;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 130 "config.l"
{DEBUG("quote            ");  return T_QUOTE;}
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 132 "config.l"
{DEBUG("any_member       ");  /* Can't use {ANY_MEMBER} at start of line due to bug in flex */ return T_ANY_MEMBER;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 134 "config.l"
{DEBUG("comment          ");  return T_COMMENT;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 136 "config.l"
{DEBUG("allowobfuscation ");  return T_ALLOWOBFUSCATION;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 137 "config.l"
{DEBUG("allowoptimization");  return T_ALLOWOPTIMIZATION;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 138 "config.l"
{DEBUG("allowshrinking   ");  return T_ALLOWSHRINKING;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 140 "config.l"
{DEBUG("keep cls w/      ");  return T_KEEPCLASSESWITHMEMBERS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 141 "config.l"
{DEBUG("keep cls w/names ");  return T_KEEPCLASSESWITHMEMBERNAMES;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 142 "config.l"
{DEBUG("keepmembernames  ");  return T_KEEPCLASSMEMBERNAMES;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 143 "config.l"
{DEBUG("keepmembers      ");  return T_KEEPCLASSMEMBERS;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 144 "config.l"
{DEBUG("keepnames        ");  return T_KEEPNAMES;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 145 "config.l"
{DEBUG("keep             ");  return T_KEEP;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 147 "config.l"
{DEBUG("static           ");  return T_STATIC;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 148 "config.l"
{DEBUG("final            ");  return T_FINAL;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 149 "config.l"
{DEBUG("transient        ");  return T_TRANSIENT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 150 "config.l"
{DEBUG("native           ");  return T_NATIVE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 152 "config.l"
{DEBUG("class            ");  return T_CLASS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 153 "config.l"
{DEBUG("enum             ");  return T_ENUM;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 154 "config.l"
{DEBUG("interface        ");  return T_INTERFACE;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 155 "config.l"
{DEBUG("@interface       ");  return T_AT_INTERFACE;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 157 "config.l"
{DEBUG("extends          ");  return T_EXTENDS;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 158 "config.l"
{DEBUG("implements       ");  return T_IMPLEMENTS;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 160 "config.l"
{DEBUG("{                ");  return T_MEMBERS_BEGIN;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 161 "config.l"
{DEBUG("}                ");  return T_MEMBERS_END;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 163 "config.l"
{DEBUG("(                ");  return T_ARGS_BEGIN;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 164 "config.l"
{DEBUG(")                ");  return T_ARGS_END;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 166 "config.l"
{DEBUG("fields           ");  return T_FIELDS;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 167 "config.l"
{DEBUG("methods          ");  return T_METHODS;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 169 "config.l"
{DEBUG("init             ");  return T_INIT;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 171 "config.l"
{DEBUG("public           ");  return T_PUBLIC;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 172 "config.l"
{DEBUG("private          ");  return T_PRIVATE;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 173 "config.l"
{DEBUG("protected        ");  return T_PROTECTED;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 175 "config.l"
{DEBUG("libraryjars       ");  return T_LIBRARYJARS;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 177 "config.l"
{DEBUG("injars            ");  return T_INJARS;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 178 "config.l"
{DEBUG("outjars           ");  return T_OUTJARS;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 180 "config.l"
{DEBUG("[ignored rule]   "); return T_ADAPTCLASSSTRINGS;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 181 "config.l"
{DEBUG("[ignored rule]   "); return T_ADAPTRESOURCEFILECONTENTS;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 182 "config.l"
{DEBUG("[ignored rule]   "); return T_ADAPTRESOURCEFILENAMES;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 183 "config.l"
{DEBUG("[ignored rule]   "); return T_ALLOWACCESSMODIFICATION;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 184 "config.l"
{DEBUG("[ignored rule]   "); return T_APPLYMAPPING;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 185 "config.l"
{DEBUG("[ignored rule]   "); return T_ASSUMENOSIDEEFFECTS;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 186 "config.l"
{DEBUG("[ignored rule]   "); return T_CLASSOBFUSCATIONDICTIONARY;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 187 "config.l"
{DEBUG("[ignored rule]   "); return T_DONTNOTE;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 188 "config.l"
{DEBUG("[ignored rule]   "); return T_DONTOBFUSCATE;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 189 "config.l"
{DEBUG("[ignored rule]   "); return T_DONTOPTIMIZE;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 190 "config.l"
{DEBUG("[ignored rule]   "); return T_DONTPREVERIFY;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 191 "config.l"
{DEBUG("[ignored rule]   "); return T_DONTSHRINK;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 192 "config.l"
{DEBUG("[ignored rule]   "); return T_DONTWARN;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 193 "config.l"
{DEBUG("[ignored rule]   "); return T_DONTUSEMIXEDCASECLASSNAMES;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 194 "config.l"
{DEBUG("[ignored rule]   "); return T_DONTSKIPNONPUBLICLIBRARYCLASSES;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 195 "config.l"
{DEBUG("[ignored rule]   "); return T_FLATTENPACKAGEHIERARCHY;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 196 "config.l"
{DEBUG("[ignored rule]   "); return T_INCLUDE;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 197 "config.l"
{DEBUG("[ignored rule]   "); return T_KEEPATTRIBUTES;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 198 "config.l"
{DEBUG("[ignored rule]   "); return T_KEEPPACKAGENAMES;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 199 "config.l"
{DEBUG("[ignored rule]   "); return T_KEEPPARAMETERNAMES;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 200 "config.l"
{DEBUG("[ignored rule]   "); return T_MERGEINTERFACESAGGRESSIVELY;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 201 "config.l"
{DEBUG("[ignored rule]   "); return T_OBFUSCATIONDICTIONARY;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 202 "config.l"
{DEBUG("[ignored rule]   "); return T_OPTIMIZATIONPASSES;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 203 "config.l"
{DEBUG("[ignored rule]   "); return T_OPTIMIZATIONS;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 204 "config.l"
{DEBUG("[ignored rule]   "); return T_OVERLOADAGGRESSIVELY;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 205 "config.l"
{DEBUG("[ignored rule]   "); return T_PACKAGEOBFUSCATIONDICTIONARY;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 206 "config.l"
{DEBUG("[ignored rule]   "); return T_PRINTCONFIGURATION;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 207 "config.l"
{DEBUG("[ignored rule]   "); return T_PRINTMAPPING;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 208 "config.l"
{DEBUG("[ignored rule]   "); return T_PRINTSEEDS;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 209 "config.l"
{DEBUG("[ignored rule]   "); return T_PRINTUSAGE;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 210 "config.l"
{DEBUG("[ignored rule]   "); return T_RENAMESOURCEFILEATTRIBUTE;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 211 "config.l"
{DEBUG("[ignored rule]   "); return T_REPACKAGECLASSES;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 212 "config.l"
{DEBUG("[ignored rule]   "); return T_USEUNIQUECLASSMEMBERNAMES;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 213 "config.l"
{DEBUG("[ignored rule]   "); return T_VERBOSE;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 214 "config.l"
{DEBUG("[ignored rule]   "); return T_WHYAREYOUKEEPING;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 216 "config.l"
{DEBUG("pattern          "); yylval = yytext; return T_PATTERN;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 219 "config.l"
{
    fprintf(stderr, "Unexpected token %s on line %d\n", yytext, line_number);
    exit(1);
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 224 "config.l"
ECHO;
	YY_BREAK
#line 1654 "generated_files/tokenizer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 743 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 743 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 742);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 224 "config.l"



